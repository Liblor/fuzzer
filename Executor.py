from winappdbg import Debug
from MyEventHandler import MyEventHandler
import logging

def executor(cmd_line, offset, value_index, value_type, new_file, run_number, save_directory, logger):
    ''' Setup the debugger and the event handler. Execute the process, and after completion log the
        run-specific information, as well as check for any specific output generated by the event handler. '''
    
    #handler = MyEventHandler()	###### XXXXXX can i set the handler.new_file object here, to eliminate parsing it out in the handler?
    handler = MyEventHandler(new_file, save_directory)   # why the hell was I not passing arguments in this way again?
    debug   = Debug(handler)
    process = debug.execl(cmd_line)
    debug.loop()
    output = '%s %d %s\n' % ('-'*10, run_number, '-'*10)
    output += 'Running : %s\n' % cmd_line
    output += 'run number = %d, offset = %d, value_index = %d, value_type = %s' % (run_number, offset, value_index, value_type)   # XXXXXXX don't want value printed, just an enum/key representing which value was used

    # if any signals are handled, debug output will be non-empty
    handler_output = handler.getOutput()
    if handler_output:
        print '[!] Crash! Run number %d' % run_number
        output += 'handler_output = %s\n' % handler_output          #### HAVE THIS GENERATE A HIGHER LOG LEVEL
    logger.log(logging.INFO, output)

